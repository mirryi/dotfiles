#
# comment
#
snippet "\(\* " "(* ... *)" rA
(* $1 *
endsnippet

#
# let
#
snippet let "let ? = ?"
let ${1:name} = ${2:${VISUAL}}
endsnippet

snippet letin "let ? = ? in"
let ${1:name} = ${2:${VISUAL}} in $0
endsnippet

snippet letr "let rec ? = ?"
let rec ${1:name} = ${2:${VISUAL}}
endsnippet

snippet letri "let rec ? = ? in"
let rec ${1:name} = ${2:${VISUAL}} in $0
endsnippet

snippet leto "let open ?"
let open ${1:${VISUAL}}
endsnippet

snippet letoi "let open ? in"
let open ${1:${VISUAL}} in $0
endsnippet

#
# match
#
snippet match "match ? with ..."
match ${1:${VISUAL}} with | $0
endsnippet

snippet matchopt "match ? with Some(?) ..."
match ${1:${VISUAL}} with
| Some ${2:v} -> ${3:()}
| None -> ${4:()}
endsnippet

snippet "([^\s].*)\.match" "match ? with ..." r
match `!p snip.rv = match.group(1)`$1 with | $0
endsnippet


#
# if
#
snippet if "if ? then ? else ?"
if ${1:${VISUAL}} then ${2:e1} else ${3:e2}
endsnippet

snippet "([^\s].*)\.if" "if ? then ? else ?" r
if `!p snip.rv = match.group(1)`$1 then ${2:e1} else ${3:e2}
endsnippet

#
# fun
#
snippet fun "fun ? -> ?"
(fun ${1:param} -> ${2:${VISUAL}})
endsnippet

#
# raise
#
snippet raise "raise ?"
raise ${1:${VISUAL}}
endsnippet

snippet "([^\s].*)\.raise" "raise ?;" r
raise `!p snip.rv = match.group(1)`$1
endsnippet

#
# open
#
snippet open "open ?"
open ${1:${VISUAL}}
endsnippet

#
# include
#
snippet include "include ?"
include ${1:${VISUAL}}
endsnippet

#
# begin / end
#
snippet begin "begin ... end"
begin
	${0:${VISUAL}}
end
endsnippet

#
# module
#
snippet mods "module ? = struct ... end"
module ${1:Name} ${2/..*/: /}$2 = struct
	${0:${VISUAL}}
end
endsnippet

snippet modg "module ? = sig ... end"
module ${1:Name} ${2/..*/:/} $2 = sig
	${0:${VISUAL}}
end
endsnippet

snippet modsg "module ? : sig ... end = struct ... end"
module ${1:Name} : sig
	$2
end = struct
	${0:${VISUAL}}
end
endsnippet

snippet modf "module ? (? : ?) : ? = struct ... end"
module ${1:Name} (${2:Param} : ${3:ParamType}) ${2/..*/:/} $2 = struct
	${0:${VISUAL}}
end
endsnippet

snippet struct "struct ... end"
struct
	${0:${VISUAL}}
end
endsnippet

snippet sig "sig ... end"
sig
	${0:${VISUAL}}
end
endsnippet
