snippet TODO "# TODO ?" b
# TODO ${0:${VISUAL}}
endsnippet

#
# if / else
#
snippet if "if ?:" b
if ${1:condition}:
	${0:${VISUAL}}
endsnippet

snippet elif "else if ?:" b
elif ${1:condition}:
	${0:${VISUAL}}
endsnippet

snippet else "else:" b
else:
	${0:${VISUAL}}
endsnippet

#
# for
#
snippet for "for ? in ?:" b
for ${1:item} in ${2:iter}:
	${0:${VISUAL}}
endsnippet

#
# while
#
snippet while "while ?:" b
while ${1:cond}:
	${0:${VISUAL}}
endsnippet

#
# with
#
snippet with "with ? as ?:" b
with ${1:${VISUAL}} as ${2:var}
endsnippet

#
# try / except
#
snippet try "try: ... except ?:" b
try:
	${1:${VISUAL}}
except ${2:Error}:
	$0
endsnippet

#
# return
#
snippet ret "return ?" b
return ${1:${VISUAL}}
endsnippet

snippet "([^\s].*)\.ret" "return ?" r
return `!p snip.rv = match.group(1)`$1
endsnippet

#
# lambda
#
snippet lam "lambda ?: ?"
lambda ${1:param}: ${2:${VISUAL}}
endsnippet

#
# print
#
snippet print "print(?)"
print(${1:${VISUAL}})
endsnippet

#
# def
#
priority 100
snippet def "def ?(?):" b
def ${1:name}($2) ${3/..*/-> /}$3:
	${0:${VISUAL}}
endsnippet

priority 200
snippet defa "def async ?(?):" b
def async ${1:name}($2) ${3/..*/-> /}$3:
	${0:${VISUAL}}
endsnippet

priority 200
snippet defmain "def main():" b
def main():
	${0:${VISUAL}}
endsnippet

priority 300
snippet defmaint "def main(): ..." b
def main():
	${0:${VISUAL}}

if __name__ == '__main__':
	main()
endsnippet


#
# class
#
snippet class "class ?:" b
class ${1:Name}`!p snip.rv = '(' if t[2] != '' else ''`${2:(}`!p snip.rv = ')' if t[2] != '' else ''`:
	${0:${VISUAL}}
endsnippet

snippet definit "def __init__(self): " b
def __init__(self, ${1:params}):
	${0:${VISUAL}}
endsnippet

#
# import
#
snippet imp "import ?" b
import ${1:${VISUAL}}
endsnippet

snippet impf "from ? import ?" b
from ${1:${VISUAL}} import $2
endsnippet
