#
# if / else
#
snippet if "if ? {}"
if ${1:condition} {
	${0:${VISUAL}}
}
endsnippet

snippet "else if" "else if ? {}"
else if ${1:condition} {
	${0:${VISUAL}}
}
endsnippet

snippet else "else {}"
else {
	${0:${VISUAL}}
}
endsnippet

snippet "if let" "if let ? = ? {}"
if let ${1:destr} = ${2:expr} {
	${0:${VISUAL}}
}
endsnippet

#
# match
#
snippet match "match ? { ? }"
match ${1:expr} {
	${0:${VISUAL}}
}
endsnippet

#
# for
#
snippet for "for ? in ? {}"
for ${1:ele} in ${2:iter} {
	${0:${VISUAL}}
}
endsnippet

#
# while
#
snippet while "while ? {}"
while ${1:cond} {
	${0:${VISUAL}}
}
endsnippet

snippet whilel "while let ? = ? {}"
while let ${1:destr} = ${2:expr} {
	${0:${VISUAL}}
}
endsnippet

#
# closure
#
snippet ||| "|?| ?" A
|${1:param}| ${0:${VISUAL}}
endsnippet

snippet ||\ "|?| {}" A
|${1:param}| {
	${0:${VISUAL}}
}
endsnippet

#
# Result<T>
#
snippet Res "Result<?>"
Result<${1:${VISUAL}}>
endsnippet

snippet Ok "Ok(?)"
Ok(${1:${VISUAL}})
endsnippet

snippet Err "Err(?)"
Err(${1:${VISUAL}})
endsnippet

#
# Option<T>
#
snippet Opt "Option<?>"
Option<${1:${VISUAL}}>
endsnippet

snippet Some "Some(?)"
Some(${1:${VISUAL}})
endsnippet

#
# Box<T>
#
snippet Box "Box<?>"
Box<${1:${VISUAL}}>
endsnippet

snippet box "Box::new(?)"
Box::new(${1:${VISUAL}})
endsnippet

#
# Vec<T>
#
snippet vec! "vec![]"
vec![${1:items}]
endsnippet

#
# String
#
snippet fmt! "format!(?)"
format!("${1:${VISUAL}}"${2/..*/, /}$2)
endsnippet
